#+TITLE:     Core IDE
#+AUTHOR:    Irfan Shah

* Exec Path
This is to ensure that shell and Emacs can share ~PATH~ env var
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (setq exec-path-from-shell-variables '("PATH" "GOPATH" "ORG_GCAL_CLIENTID" "ORG_GCAL_CLIENTSECRET" "ORG_GCAL_EMAIL" "ORG_GCAL_ORG_PATH"))
  :init
  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+END_SRC

#+RESULTS:

* UX
** Icons
#+BEGIN_SRC emacs-lisp
(use-package memoize
  :ensure t)

(use-package all-the-icons
  :ensure t)
#+END_SRC

* Project Management
** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x" . helm-M-x)
         ("M-<f5>" . helm-find-files)
         ([f10] . helm-buffers-list)
         ([S-f10] . helm-recentf)))


#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
  :delight '(:eval (concat " " (projectile-project-name)))
  (setq projectile-completion-system 'helm)
  :config
  (projectile-mode))

(use-package helm-projectile
  :ensure t
  :bind (("s-p" . helm-projectile-switch-project)
	 ("s-t" . helm-projectile-find-file)
	 ))
#+END_SRC

** Search in a project

#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure t)

(use-package helm-rg
  :ensure t
  :bind (("C-c h /" . helm-projectile-rg)
	 ))
#+END_SRC

** Neotree: Nerdtree for emacs
 #+BEGIN_SRC emacs-lisp
 (use-package neotree
   :ensure t
   :bind (("C-c n e" . neotree-toggle)))
 #+end_src
** Indispensable git companion
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** M-x Alternate via ido

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (global-set-key (kbd "s-x") 'smex))
#+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(use-package winner
  :ensure t
  )

(use-package ace-window
  :ensure t)

(global-set-key (kbd "M-o") 'ace-window)




#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :init (yas-global-mode t))

(use-package doom-snippets
  :load-path "~/dev/etc/doom-snippets"
  :after yasnippet)
#+END_SRC

** Dired mode

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
)

(global-set-key (kbd "S-<f1>")
  (lambda ()
    (interactive)
    (dired "~/")))
#+END_SRC
* Completions
** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config (progn
            (setq company-idle-delay 0)
            (setq company-minimum-prefix-length 1)
            (setq company-tooltip-align-annotations t)
            ))

#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  ;; :custom (lsp-gopls-server-args '("-debug" "127.0.0.1:0"))
  :commands (lsp lsp-deferred))


(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config (progn
            ;; disable inline documentation
            (setq lsp-ui-sideline-enable nil)
            ;; disable showing docs on hover at the top of the window
            (setq lsp-ui-doc-enable nil)))

(use-package company-lsp
  :ensure t
  :commands company-lsp)


#+END_SRC

** Syntax checker & Highlighting

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t)

(use-package hi-lock
  :bind (("C-RET h l" . highlight-lines-matching-regexp)
         ("C-RET h r" . highlight-regexp)
         ("C-RET h w" . highlight-phrase)
	 ("C-RET h 0" . hi-lock-unface-buffer)))

#+END_SRC

* Provide this so that it may be required

#+NAME: provide
#+BEGIN_SRC emacs-lisp
(provide 'ide)
#+END_SRC

