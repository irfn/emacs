#+TITLE:     Core IDE
#+AUTHOR:    Irfan Shah

* Env Vars

#+BEGIN_SRC emacs-lisp
(use-package load-env-vars
  :ensure t
  :init (load-env-vars "~/.profile"))
#+END_SRC

#+RESULTS:

* Exec Path
This is to ensure that shell and Emacs can share ~PATH~ env var
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (setq exec-path-from-shell-variables '("PATH"))
  :init
  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+END_SRC
#+RESULTS:
: tcar

* Mac
#+BEGIN_SRC emacs-lisp
;; Keybonds
(global-set-key [(hyper a)] 'mark-whole-buffer)
(global-set-key [(hyper v)] 'yank)
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper s)] 'save-buffer)
(global-set-key [(hyper l)] 'goto-line)

(global-set-key [(hyper w)]
                (lambda () (interactive) (delete-window)))
(global-set-key [(hyper z)] 'undo)

(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'hyper)

#+END_SRC
* UX
** Icons
#+BEGIN_SRC emacs-lisp
(use-package memoize
  :ensure t)

(use-package all-the-icons
  :ensure t)
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

#+RESULTS:
| doom-modeline-mode | (lambda nil (setq gc-cons-threshold best-gc-cons-threshold)) | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version | table--make-cell-map |

** Dashboard
#+BEGIN_SRC emacs-lisp
(setq dashboard-banner-logo-title "Huh!")
(setq dashboard-startup-banner "~/dev/etc/don-t-panic.png")

;;(setq show-week-agenda-p t)

;; To disable shortcut "jump" indicators for each section, set
;;(setq dashboard-show-shortcuts nil)

(setq dashboard-items '((recents  . 8)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))

(setq dashboard-footer-messages '(
"Talking to his professor about orbital mechanics, Newton realized that he needed to stop and invent Calculus. Go Shave that yak! err.. Once in a while."
"'Git' was several weeks of yak shaving for linus! Go Shave that yak! err.. Once in a while."
"Be aware of the army of yaks that threatens your time and sanity!"
"The Golden Yak is the yak that changes everything, the one that alters your reality."
"Golden yaks change behavior."
"Yaks are a part of life and of progress."
"Yaks. Theyâ€™re so much more than hair."
"Wat! you think you found that extremely rare 'Golden Yak'"
"Welcome to the church of Emacs"
"While any text editor can save your files,\
only Emacs can save your soul"
"Meta yaks are magical!"
"Why Should I Care What Color the Bikeshed Is?"
"Using vi is not a sin; it is a penance"
"Calling EMACS an editor is like calling the Earth a hunk of dirt."
"Emacs is a nice operating system"
))
(use-package dashboard
  :ensure t
  :config (setq dashboard-startup-banner 3)
  :init (dashboard-setup-startup-hook))

#+END_SRC

#+RESULTS:
: t

* Project Management
** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x" . helm-M-x)
         ("M-<f5>" . helm-find-files)
         ([f10] . helm-buffers-list)
         ([S-f10] . helm-recentf)))


#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
  :delight '(:eval (concat " " (projectile-project-name)))
  (setq projectile-completion-system 'helm)
  :config
  (projectile-mode))

(use-package helm-projectile
  :ensure t
  :bind (("H-p" . helm-projectile-switch-project)
	 ("H-t" . helm-projectile-find-file)
	 ))
#+END_SRC

** Search in a project

#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure t)

(use-package helm-rg
  :ensure t
  :bind (("C-c h /" . helm-projectile-rg)
	 ))
#+END_SRC

** Neotree: Nerdtree for emacs
 #+BEGIN_SRC emacs-lisp
 (use-package neotree
   :ensure t
   :bind (("C-c n t" . neotree-toggle)))
 #+end_src
** Indispensable git companion
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** M-x Alternate via ido

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (global-set-key (kbd "H-x") 'smex))
#+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(use-package winner
  :ensure t
  )

(use-package ace-window
  :ensure t)

(global-set-key (kbd "M-o") 'ace-window)




#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :init (yas-global-mode t))

(use-package doom-snippets
  :load-path "~/dev/etc/doom-snippets"
  :after yasnippet)
#+END_SRC

** Dired mode

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
)

(global-set-key (kbd "H-<f1>")
  (lambda ()
    (interactive)
    (dired "~/")))
#+END_SRC
* Completions
** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config (progn
            (setq company-idle-delay 0)
            (setq company-minimum-prefix-length 1)
            (setq company-tooltip-align-annotations t)
            )
  :hook (prog-mode . company-mode))

#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  ;; :custom (lsp-gopls-server-args '("-debug" "127.0.0.1:0"))
  :commands (lsp lsp-deferred)
  :config (require 'lsp-clients))


(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config (progn
            ;; disable inline documentation
            (setq lsp-ui-sideline-enable nil)
            ;; disable showing docs on hover at the top of the window
            (setq lsp-ui-doc-enable nil)))

(use-package company-lsp
  :ensure t
  :commands company-lsp)


#+END_SRC

** Syntax checker & Highlighting

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook (prog-mode . flycheck-mode))

(use-package hi-lock
  :bind (("C-RET h l" . highlight-lines-matching-regexp)
         ("C-RET h r" . highlight-regexp)
         ("C-RET h w" . highlight-phrase)
	 ("C-RET h 0" . hi-lock-unface-buffer)))

#+END_SRC

* Provide this so that it may be required

#+NAME: provide
#+BEGIN_SRC emacs-lisp
(provide 'ide)
#+END_SRC

