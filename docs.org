#+TITLE:     Docs
#+AUTHOR:    Irfan Shah

* Org Mode
Core of the Org mode is setup in ~init.el~ since org is the foundation for literate and customizations ironically have to happen before org files are read.

#+BEGIN_SRC emacs-lisp

(setq org-export-with-sub-superscripts nil)
(global-set-key (kbd "C-c C-<return>") 'remember)
#+END_SRC

#+RESULTS:
: remember

* Org Based Presentations
#+BEGIN_SRC emacs-lisp

  (defun my/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun my/org-present-hook ()
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 3.5) variable-pitch)
                                       (org-document-title (:height 1.5) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.55) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))
    (org-display-inline-images)
    (my/org-present-prepare-slide))

  (defun my/org-present-quit-hook ()
    (setq-local face-remapping-alist '((default variable-pitch default)))
    (org-present-small)
    (org-remove-inline-images)
    )

  (defun my/org-present-prev ()
    (interactive)
    (org-present-prev)
    (my/org-present-prepare-slide))

  (defun my/org-present-next ()
    (interactive)
    (org-present-next)
    (org-redisplay-inline-images)
    (my/org-present-prepare-slide))

  (use-package org-present
    :bind (("H-q" . toggle-truncate-lines)
           ("<f8>" . org-present)
           ("<f5>" . org-redisplay-inline-images)
           ("C-c C-j" . my/org-present-next)
           ("C-c C-k" . my/org-present-prev))
    :hook ((org-present-mode . my/org-present-hook)
           (org-present-mode-quit . my/org-present-quit-hook)))

#+END_SRC

* Org Babel

#+BEGIN_SRC emacs-lisp
(defun ob-fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

(defun ob-do-load-langs ()
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (ditaa . t)
     (plantuml . t)
     (emacs-lisp . t)
     (rust . t))))

(defun ob-confirm-babel-evaluate (lang body);;
  (not (member lang '("python" "go" "ruby" "clojure" "sh" "ditaa" "plantuml" "emacs-lisp", "rust"))))

(use-package ob
  :defer t
  :config (setq org-confirm-babel-evaluate 'ob-confirm-babel-evaluate)
  :init
  (progn
    (add-hook 'org-mode-hook 'ob-do-load-langs)
    ;; Fix redisplay of inline images after a code block evaluation.
    (add-hook 'org-babel-after-execute-hook 'ob-fix-inline-images)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun individual-visibility-source-blocks ()
  "Fold some blocks in the current buffer."
  (interactive)
  (org-show-block-all)
  (org-block-map
   (lambda ()
     (let ((case-fold-search t))
       (when (and
              (save-excursion
                (beginning-of-line 1)
                (looking-at org-block-regexp))
              (cl-assoc
               ':hidden
               (cl-third
                (org-babel-get-src-block-info))))
         (org-hide-block-toggle))))))

(add-hook
 'org-mode-hook
 (function individual-visibility-source-blocks))
#+END_SRC
* Org Export
#+begin_src emacs-lisp
(use-package ox-odt
  :ensure t)
#+end_src

#+RESULTS:
* Plantuml
#+BEGIN_SRC emacs-lisp

(use-package plantuml-mode
  :ensure t
  :init
  (progn
  (setq org-plantuml-jar-path
	(expand-file-name "/usr/local/Cellar/plantuml/1.2019.12/libexec/plantuml.jar"))
  (setq plantuml-default-exec-mode 'jar))
)

#+END_SRC

#+RESULTS:

* Calendar

#+BEGIN_SRC emacs-lisp
;;(use-package org-gcal
;;  :ensure t
;;  :init (setq org-gcal-client-id (getenv "ORG_GCAL_CLIENTID")
;;              org-gcal-client-secret (getenv "ORG_GCAL_CLIENTSECRET")
;;              org-gcal-file-alist '(((getenv "ORG_GCAL_EMAIL") . (getenv "ORG_GCAL_ORG_PATH"))))
;;)
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

Enabling export of Org to GH Flavored markdown

#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
   :ensure t)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(use-package auto-org-md
   :ensure t)
#+END_SRC
* Emoji in org and markdown
#+Name: dump
#+BEGIN_SRC emacs-lisp

(use-package company-emoji
  :ensure t
  :init  (set (make-local-variable 'company-backends) '(company-go)))

(use-package emoji-cheat-sheet-plus
  :ensure t
  :defer t
  :init
  (progn
    ;; enabled emoji in buffer
    (add-hook 'org-mode-hook 'emoji-cheat-sheet-plus-display-mode)
    (add-hook 'markdown-mode-hook 'emoji-cheat-sheet-plus-display-mode)))
#+END_SRC

* Agenda
#+BEGIN_SRC emacs-lisp

  (use-package org-agenda
    :ensure nil
    :custom
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-inhibit-startup t)
    (org-agenda-show-log t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-span 3)
    (org-agenda-start-day "-1d")
    (org-agenda-start-on-weekday nil)
    (org-agenda-sticky nil)
    (org-agenda-tags-column -100)
    (org-agenda-time-grid '((daily today require-timed)))
    (org-agenda-use-tag-inheritance t)
    (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
    (org-enforce-todo-dependencies t)
    (org-habit-completed-glyph ?✓)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-habit-today-glyph ?‖)
    (org-track-ordered-property-with-tag t))

#+END_SRC

* Pomodoro
Attempt to be more productive with pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :defer 0.5
    :custom
    (alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
    (org-pomodoro-format " %s")
    (org-pomodoro-audio-player "/usr/bin/afplay")
    (org-pomodoro-finished-sound "/System/Library/Sounds/Hero.aiff")
    (org-pomodoro-killed-sound "/System/Library/Sounds/Sosumi.aiff")
    (org-pomodoro-long-break-sound "/System/Library/Sounds/Glass.aiff")
    (org-pomodoro-overtime-sound "/System/Library/Sounds/Ping.aiff")
    (org-pomodoro-short-break-sound "/System/Library/Sounds/Purr.aiff")
    (org-pomodoro-start-sound "/System/Library/Sounds/Funk.aiff")
    (org-pomodoro-start-sound-p t))
#+END_SRC

* Provide this so that it may be required
#+NAME: provide
#+BEGIN_SRC emacs-lisp
(provide 'docs)
#+END_SRC
