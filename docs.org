#+TITLE:     Docs
#+AUTHOR:    Irfan Shah

* Org Mode

#+BEGIN_SRC elisp
(defun my-inhibit-global-linum-mode ()
  "Counter-act `global-linum-mode'."
  (add-hook 'after-change-major-mode-hook
	    (lambda () (linum-mode 0))
	    :append :local))

(use-package org
  :config (progn
	    (setq org-todo-keywords (quote ((sequence "DISCUSS" "TODO" "IN-PROGRESS" "REVIEW" "DELEGATED" "DEFERED" "DONE")))))
  :init (progn
		  (add-hook 'org-mode-hook 'my-inhibit-global-linum-mode)
		  (add-hook 'org-mode-hook 'flyspell-mode)))

(use-package org-bullets
  :ensure t
  :config (setq org-bullets-bullet-list '("◉" "⌘" "○" "⌗"))
  :init (add-hook 'org-mode-hook 'org-bullets-mode))

#+END_SRC

* Org Based Presentations
#+BEGIN_SRC elisp
(use-package org-present
  :ensure t
  :bind (("<f8>" . org-present)))
#+END_SRC

* Org Babel

#+BEGIN_SRC elisp
(defun ob-fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

(defun ob-do-load-langs ()
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (ditaa . t)
     (plantuml . t)
     (elisp . t))))

(defun ob-confirm-babel-evaluate (lang body)
  (not (member lang '("python" "go" "ruby" "clojure" "sh" "ditaa" "plantuml" "elisp"))))

(use-package ob
  :defer t
  :config (setq org-confirm-babel-evaluate 'ob-confirm-babel-evaluate)
  :init
  (progn
    (add-hook 'org-mode-hook 'ob-do-load-langs)
    ;; Fix redisplay of inline images after a code block evaluation.
    (add-hook 'org-babel-after-execute-hook 'ob-fix-inline-images)))
#+END_SRC
* Plantuml
#+BEGIN_SRC elisp

(use-package plantuml-mode
  :ensure t
  :init (setq org-plantuml-jar-path
	      (expand-file-name "/usr/local/Cellar/plantuml/1.2019.8/libexec/plantuml.jar"))
)


#+END_SRC

* Markdown
#+BEGIN_SRC elisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Emoji in org and markdown
#+Name: dump
#+BEGIN_SRC elisp

(use-package company-emoji
  :ensure t
  :init  (set (make-local-variable 'company-backends) '(company-go)))

(use-package emoji-cheat-sheet-plus
  :ensure t
  :defer t
  :init
  (progn
    ;; enabled emoji in buffer
    (add-hook 'org-mode-hook 'emoji-cheat-sheet-plus-display-mode)
    (add-hook 'markdown-mode-hook 'emoji-cheat-sheet-plus-display-mode)))
#+END_SRC

* Provide this so that it may be required
#+NAME: provide
#+BEGIN_SRC elisp
(provide 'docs)
#+END_SRC
